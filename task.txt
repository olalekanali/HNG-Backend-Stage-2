A simple task to wet your taste buds and prepare you for an amazing buffet 

Backend Task: Country Currency & Exchange API

Build a RESTful API that fetches country data from an external API, stores it in a database, and provides CRUD operations.

 Functionalities

 Fetch country data from: https://restcountries.com/v2/all?fields=name,capital,region,population,flag,currencies
 For each country, extract the currency code (e.g. NGN, USD, GBP).
 Then fetch the exchange rate from: https://open.er-api.com/v6/latest/USD
 Match each country's currency with its rate (e.g. NGN → 1600).
 Compute a field estimated_gdp = population × random(1000–2000) ÷ exchange_rate.
 Store or update everything in MySQL as cached data.

Endpoints
 POST /countries/refresh → Fetch all countries and exchange rates, then cache them in the database
 GET /countries → Get all countries from the DB (support filters and sorting) - ?region=Africa | ?currency=NGN | ?sort=gdp_desc
 GET /countries/:name → Get one country by name
 DELETE /countries/:name → Delete a country record
 GET /status → Show total countries and last refresh timestamp
 GET /countries/image → serve summary image
Country Fields
 id — auto-generated
 name — required
 capital — optional
 region — optional
 population — required
 currency_code — required
 exchange_rate — required
 estimated_gdp — computed from population × random(1000–2000) ÷ exchange_rate
 flag_url — optional
 last_refreshed_at — auto timestamp
:white_check_mark: Validation Rules
 name, population, and currency_code are required
 Return 400 Bad Request for invalid or missing data
  Example:
 
 {
   "error": "Validation failed",
   "details": {
     "currency_code": "is required"
   }
 }

:earth_africa: External APIs
 Countries → https://restcountries.com/v2/all?fields=name,capital,region,population,flag,currencies
 Exchange rates → https://open.er-api.com/v6/latest/USD

Sample GET Response
GET /countries?region=Africa
 
 [
   {
     "id": 1,
     "name": "Nigeria",
     "capital": "Abuja",
     "region": "Africa",
     "population": 206139589,
     "currency_code": "NGN",
     "exchange_rate": 1600.23,
     "estimated_gdp": 25767448125.2,
     "flag_url": "https://flagcdn.com/ng.svg",
     "last_refreshed_at": "2025-10-22T18:00:00Z"
   },
   {
     "id": 2,
     "name": "Ghana",
     "capital": "Accra",
     "region": "Africa",
     "population": 31072940,
     "currency_code": "GHS",
     "exchange_rate": 15.34,
     "estimated_gdp": 3029834520.6,
     "flag_url": "https://flagcdn.com/gh.svg",
     "last_refreshed_at": "2025-10-22T18:00:00Z"
   }
 ]

Sample Status Response
GET /status
 
 {
   "total_countries": 250,
   "last_refreshed_at": "2025-10-22T18:00:00Z"
 }

Sample
Refresh Behavior (POST /countries/refresh)
Currency Handling
 If a country has multiple currencies, store only the first currency code from the array
 If currencies array is empty:
 Do NOT call the exchange rate API for this country
 Set currency_code to null
 Set exchange_rate to null
 Set estimated_gdp to 0
 Still store the country record
 If currency_code is not found in the exchange rates API:
 Set exchange_rate to null
 Set estimated_gdp to null
 Still store the country record

Update vs Insert Logic
 Match existing countries by name (case-insensitive comparison)
 If country exists: Update all fields including recalculating estimated_gdp with a new random multiplier
 If country doesn't exist: Insert new record
 The random multiplier (1000-2000) should be generated fresh on each refresh for each country
 successful refresh should update the global last_refreshed_at timestamp

Image Generation
When /countries/refresh runs:
 After saving countries in the database, generate an image (e.g., cache/summary.png) containing:
 Total number of countries
 Top 5 countries by estimated GDP
 Timestamp of last refresh
 Save the generated image on disk at cache/summary.png.
Add a new endpoint:
 GET /countries/image → Serve the generated summary image
 If no image exists, return:
 { "error": "Summary image not found" }

External API Error Handling
 If either external API fails or times out:
 Return 503 Service Unavailable
 Response body: { "error": "External data source unavailable", "details": "Could not fetch data from [API name]" }
 Do not modify existing database records if refresh fails

:x: Error Handling
 Return consistent JSON responses:
 404 → { "error": "Country not found" }
 400 → { "error": "Validation failed" }
 500 → { "error": "Internal server error" }

:gear: Technical Notes
 Use a Database for persistence
 Only update cache when /countries/refresh is called
 Use .env for configs (DB, port, etc.)
 JSON responses only
 Include a README with setup instructions


Submission instructions
 You can implement this in any language of your choice (eg Fortran, C, Assembly etc)
 Host the API: Vercel is forbidden this cohort, and no Render, other options like (Railway, Heroku, AWS, PXXL App etc.) are accepted.
 Include the GitHub repo link with:
 Clear README with setup instructions
 Instructions to run locally
 List of dependencies and how to install them
 Environment variables needed (if any)
 Test your endpoint before submission — ensure it returns the correct response format
 Provide any relevant tests, API documentation, or notes in the repo

Submission: #IMPORTANT
For your submission, make use of the bot in the #stage-2-backend channel by entering /stage-two-backend in the channel and submitting in the requested URLs.
:pushpin: Submission Process
 Verify your server works (test from multiple networks if possible)
 Go to the #stage-2-backend channel in Slack
 Run the command:  /stage-two-backend
 Submit:
 Your API base URL  (https://yourapp.domain.app)
 Your GitHub repo link
 Your full name
 Your email
 Stack
 5.  Please check Thanos bot to see the error message or success message after each attempt.
Submission Deadline: Deadline: Wednesday, 29th Oct 2025 | 11:59pm GMT+1 (WAT)

Good luck, Backend Wizards! :rocket: